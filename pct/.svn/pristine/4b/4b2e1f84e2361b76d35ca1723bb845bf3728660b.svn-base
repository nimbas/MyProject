package com.acube.pvs.web;
 
import java.text.SimpleDateFormat;
import java.util.Date;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.propertyeditors.CustomDateEditor;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.web.bind.WebDataBinder;
import org.springframework.web.bind.annotation.InitBinder;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.ResponseBody;

import com.acube.common.domain.Result;
import com.acube.common.domain.ResultCode;
import com.acube.common.domain.jqgrid.JQueryGrid;
import com.acube.common.domain.searchFilter.SearchFilter;
import com.acube.common.pagination.Pagination;
import com.acube.common.service.co.LogicalDateService;
import com.acube.pvs.domain.PsProd;
import com.acube.pvs.service.ProdFeatureService;
import com.acube.security.service.SecurityService;
 
@Controller
@RequestMapping
/**
 * 상품관련
 *
 * @author YangByeongSub
 * @since
 *
 */
public class ProductController {
	
	private final static Logger logger = LoggerFactory.getLogger(ProductController.class);
	
	@Autowired ProdFeatureService 	prodFeatureService;
	@Autowired LogicalDateService 	dateService;
	@Autowired SecurityService 	securityService;
	
	@InitBinder
	public void initBinder(WebDataBinder binder) {
		
		//날짜 데이타가 값이 입력이 안되는 경우 '' 를 Date 변환시 에러가 나는 문제 처리.
	    SimpleDateFormat dateFormat = new SimpleDateFormat("yyyy-MM-dd HH:mm");
	    dateFormat.setLenient(false);

	    // true passed to CustomDateEditor constructor means convert empty String to null
	    binder.registerCustomEditor(Date.class, new CustomDateEditor(dateFormat, true));
	}
	
	/**
	 * list 화면 
	 * @param model
	 * @param searchFilter
	 * @return
	 */
	@RequestMapping(value={"/products"}, method={RequestMethod.GET})
	public String moveToProductList(Model model){
		return "pvs/product/list";
	}

	/**
	 * list 조회
	 * @param searchFilter
	 * @return
	 */
	@RequestMapping(value={"/product/search"}, method={RequestMethod.POST})
	@ResponseBody public JQueryGrid<PsProd> searchProduct( SearchFilter searchFilter) {
		return prodFeatureService.getProducts(searchFilter, new Pagination(searchFilter.getPage(), searchFilter.getRows()));
	}

	/**
	 *  조회화면
	 * @param provFtr
	 * @return
	 */
	@RequestMapping(value={"/product/{prodCd}"}, method={RequestMethod.GET})
	public String featureForm(Model model, PsProd prod){
		model.addAttribute("product", prodFeatureService.getProduct(prod));
		return "pvs/product/form";
	}
	
	@RequestMapping(value={"/product/{prodCd}"}, method={RequestMethod.POST}, consumes={"application/json"})
	@ResponseBody public Result addFeatureByProduct(Model model, @RequestBody PsProd psProd){
		psProd.setBaseInfo(dateService.getCurrentDate(), securityService.getCurrentUser().getUserId(), "updateFeature");
		prodFeatureService.addProvFeatureByProduct(psProd);
		return new Result(ResultCode.SUCCESS);
	}
 }