package com.acube.pvs.web;
 
import org.apache.commons.lang.StringUtils;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.ResponseBody;

import com.acube.common.domain.Result;
import com.acube.common.domain.ResultCode;
import com.acube.common.domain.jqgrid.JQueryGrid;
import com.acube.common.domain.searchFilter.SearchFilter;
import com.acube.common.pagination.Pagination;
import com.acube.common.service.co.LogicalDateService;
import com.acube.pvs.domain.PsProvFtr;
import com.acube.pvs.service.ProdFeatureService;
import com.acube.security.service.SecurityService;
 
@Controller
@RequestMapping
public class FeatureController {
	
	private final static Logger logger = LoggerFactory.getLogger(FeatureController.class);
	
	@Autowired ProdFeatureService 	prodFeatureService;
	@Autowired LogicalDateService 	dateService;
	@Autowired SecurityService 	securityService;
	
	
	/**
	 * feature list 화면 
	 * @param model
	 * @param searchFilter
	 * @return
	 */
	@RequestMapping(value={"/features"}, method={RequestMethod.GET})
	public String moveToFeatureList(Model model){
		return "pvs/feature/list";
	}

	/**
	 * feature list 조회
	 * @param searchFilter
	 * @return
	 */
	@RequestMapping(value={"/feature/search"}, method={RequestMethod.POST})
	@ResponseBody public JQueryGrid<PsProvFtr> searchFeatures( SearchFilter searchFilter) {
		if(searchFilter.getRows()>0){
			return prodFeatureService.getProvFeatures(searchFilter, new Pagination(searchFilter.getPage(), searchFilter.getRows()));
		}else{
			return prodFeatureService.getProvFeatures(searchFilter);
		}
	}

	/**
	 * 콤보박스용 featur
	 * @param searchFilter
	 * @return
	 */
	@RequestMapping(value={"/feature/list"}, method={RequestMethod.POST})
	@ResponseBody public JQueryGrid<PsProvFtr> searchFeaturesByCmd( SearchFilter searchFilter) {
		return prodFeatureService.getProvFeatures(searchFilter);
	}
	
	/**
	 * feature list 조회 : 선택한 상품에 맵핑된 feature를 제외한 
	 * @param searchFilter
	 * @return
	 */
	@RequestMapping(value={"/feature/{prodCd}/except"}, method={RequestMethod.POST})
	@ResponseBody public JQueryGrid<PsProvFtr> searchFeaturesExceptForChoosed(@PathVariable String prodCd, SearchFilter searchFilter) {
		if(StringUtils.isNotEmpty(prodCd)){
			return prodFeatureService.getProvFeatures(searchFilter, new Pagination(searchFilter.getPage(), searchFilter.getRows()));
		}
		return new JQueryGrid<PsProvFtr>();
	}
	
	/**
	 * feature list 조회 : 선택한 상품에 맵핑된 feature 조회
	 * @param searchFilter
	 * @return
	 */
	@RequestMapping(value={"/feature/{prodCd}/chosen"}, method={RequestMethod.POST})
	@ResponseBody public JQueryGrid<PsProvFtr> searchFeaturesForChoosed(@PathVariable String prodCd, SearchFilter searchFilter) {
		if(StringUtils.isNotEmpty(prodCd) && !"0".equals(prodCd)){
			return prodFeatureService.getProvFeaturesByProd(searchFilter);
		}
		return new JQueryGrid<PsProvFtr>();
	}
	
	/**
	 * feature 조회/수정/등록화면
	 * @param provFtr
	 * @return
	 */
	@RequestMapping(value={"/feature/{ftrCd}"}, method={RequestMethod.GET})
	public String featureForm(PsProvFtr provFtr){
		return "pvs/feature/form";
	}
	
	/**
	 * feature정보 등록
	 * @param provFtr
	 * @return
	 */
	@RequestMapping(value={"/feature/{ftrCd}"}, method={RequestMethod.POST}, consumes={"application/json"})
	@ResponseBody public Result addFeature(@RequestBody PsProvFtr provFtr){
		provFtr.setBaseInfo(dateService.getCurrentDate(), securityService.getCurrentUser().getUserId(), "addFeature");
		prodFeatureService.addProvFeatur(provFtr);
		return new Result(ResultCode.SUCCESS);
	}
	
	/**
	 * feature정보 수정
	 * @param provFtr
	 * @return
	 */
	@RequestMapping(value={"/feature/{ftrCd}"}, method={RequestMethod.PUT}, consumes={"application/json"})
	@ResponseBody public Result updateFeature(@RequestBody PsProvFtr provFtr){
		provFtr.setBaseInfo(dateService.getCurrentDate(), securityService.getCurrentUser().getUserId(), "updateFeature");
		prodFeatureService.updateProvFeatur(provFtr);
		return new Result(ResultCode.SUCCESS);
	}
	
	/**
	 * feature정보 삭제
	 * @param provFtr
	 * @return
	 */
	@RequestMapping(value={"/feature/{ftrCd}"}, method={RequestMethod.DELETE}, consumes={"application/json"})
	@ResponseBody public Result deleteFeature(@RequestBody PsProvFtr provFtr){
		provFtr.setBaseInfo(dateService.getCurrentDate(), securityService.getCurrentUser().getUserId(), "deleteFeature");
		prodFeatureService.deleteProvFeatur(provFtr);
		return new Result(ResultCode.SUCCESS);
	}
 }