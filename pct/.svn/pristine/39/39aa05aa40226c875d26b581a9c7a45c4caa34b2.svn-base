package com.acube.pvs.service;

import java.io.File;
import java.util.ArrayList;
import java.util.Date;
import java.util.List;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.dao.DuplicateKeyException;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;
import org.springframework.util.StringUtils;

import com.acube.common.domain.Result;
import com.acube.common.domain.ResultCode;
import com.acube.common.domain.WorkType;
import com.acube.common.domain.jqgrid.JQueryGrid;
import com.acube.common.domain.searchFilter.SearchFilter;
import com.acube.common.exception.AcubeException;
import com.acube.common.pagination.Pagination;
import com.acube.common.util.ResourceUtil;
import com.acube.pvs.domain.PsProd;
import com.acube.pvs.domain.PsProvFtr;
import com.acube.pvs.mapper.ProdFeatureRepository;

@Service
@Transactional
public class ProdFeatureServiceImpl implements ProdFeatureService {

	@Autowired
	ProdFeatureRepository prodFeatureRepository;
	@Autowired
	ExcelService excelService;

	/**
	 * {@inheritDoc}
	 */
	@Override
	public JQueryGrid<PsProd> getProducts(SearchFilter searchFilter, Pagination pagination) {
		return new JQueryGrid<PsProd>(pagination, prodFeatureRepository.getProducts(searchFilter, pagination));
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public PsProd getProduct(PsProd prod) {
		return prodFeatureRepository.getProduct(prod);
	}

	
	/**
	 * {@inheritDoc}
	 */
	@Override
	public JQueryGrid<PsProd> getProductsByChannel(SearchFilter searchFilter, Pagination pagination) {
		return new JQueryGrid<PsProd>(pagination, prodFeatureRepository.getProductsByChannel(searchFilter, pagination));
	}
	
	/**
	 * {@inheritDoc}
	 */
	@Override
	public int addProvFeatureByProduct(PsProd prod) {
		int ret = 0;

		if (prod.getFeatures() != null) {
			for (PsProvFtr provFtr : prod.getFeatures()) {
				provFtr.setBaseInfo(prod.getSysCreationDate(), prod.getOperatorId(), prod.getApplicationId());
				provFtr.setProd(prod);
				if (provFtr.getWorkType() == WorkType.CREATE) {
					try {
						ret = prodFeatureRepository.addProvFeatureByProduct(provFtr);
					} catch (DuplicateKeyException e) {
						throw new AcubeException("pvs.feature.key.duplicate");
					}
				} else if (provFtr.getWorkType() == WorkType.DELETE) {
					prodFeatureRepository.deleteFeaturesByProduct(provFtr);
				}
				ret++;
			}
		}
		return ret;
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public JQueryGrid<PsProvFtr> getProvFeaturesByProd(SearchFilter searchFilter) {
		return new JQueryGrid<PsProvFtr>(prodFeatureRepository.getProvFeaturesByProd(searchFilter));
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public JQueryGrid<PsProvFtr> getProvFeatures(SearchFilter searchFilter, Pagination pagination) {
		return new JQueryGrid<PsProvFtr>(pagination, prodFeatureRepository.getProvFeatures(searchFilter, pagination));
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public JQueryGrid<PsProvFtr> getProvFeatures(SearchFilter searchFilter) {
		return new JQueryGrid<PsProvFtr>(prodFeatureRepository.getProvFeatures(searchFilter));
	}

	/**
	 * {@inheritDoc}
	 */
	/*
	 * @Override public List<PsProvFtr> getProvFeatures(SearchFilter
	 * searchFilter) { return
	 * prodFeatureRepository.getProvFeatures(searchFilter); }
	 */

	/**
	 * {@inheritDoc}
	 */
	@Override
	public PsProvFtr getProvFeature(PsProvFtr provFtr) {
		return prodFeatureRepository.getProvFeature(provFtr);
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public int addProvFeatur(PsProvFtr provFtr) {
		int ret = 0;
		try {
			ret = prodFeatureRepository.addProvFeatur(provFtr);
		} catch (DuplicateKeyException e) {
			throw new AcubeException("pvs.feature.key.duplicate");
		}
		return ret;
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public int updateProvFeatur(PsProvFtr provFtr) {
		return prodFeatureRepository.updateProvFeatur(provFtr);
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public int deleteProvFeatur(PsProvFtr provFtr) {
		int ret = prodFeatureRepository.deleteProvFeatur(provFtr);
		if (ret == 0) {
			throw new AcubeException("pvs.feature.not.delete");
		}
		return ret;
	}
	
	/**
	 * {@inheritDoc}
	 */
	@Override
	public void processFeatureForExcel(List<Object> list, File excelFile, Date workDate, String operatorId, String appId) {
		List<Object> objList = excelService.processExcel(excelFile, "Features", PsProvFtr.class);
		list.addAll(objList);
		for (Object obj : list) {
			if (obj instanceof PsProvFtr) {
				PsProvFtr domain = (PsProvFtr) obj;
				domain.setBaseInfo(workDate, "bsyang", "processFeatureRegistTest");
				try {
					this.addProvFeatur(domain.validateExcelInfo());
				} catch (AcubeException e) {
					String messageId = e.getMessage();
					String message = messageId;
					domain.setResult(new Result(ResultCode.FAIL, message));
					if(messageId.equals("pvs.feature.key.duplicate")){
						message = ResourceUtil.getMessage(messageId);
						domain.setResult(new Result(ResultCode.FAIL, message));
					}
					throw new AcubeException(messageId, message);
				}
			}
		}
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public void processProdFeatureForExcel(List<Object> list, File excelFile, Date workDate, String operatorId, String appId) {

		List<Object> objList = excelService.processExcel(excelFile, "FeaturesByProduct", PsProvFtr.class);
		list.addAll(objList);
		for (Object obj : list) {
			if (obj instanceof PsProvFtr) {
				PsProvFtr domain = (PsProvFtr) obj;
				
				try {
					domain.setBaseInfo(workDate, operatorId, appId);
					domain.setWorkType(WorkType.CREATE);
					if(StringUtils.isEmpty(domain.getProdCd())){
						throw new AcubeException("Product Code is null");
					}
					if(StringUtils.isEmpty(domain.getFtrCd())){
						throw new AcubeException("Feature Code is null");
					}
					PsProd prod = new PsProd();
					prod.setBaseInfo(workDate, operatorId, appId);
					prod.setProdCd(domain.getProdCd());
					prod.setFeatures(new ArrayList<PsProvFtr>());
					domain.setWorkType(WorkType.CREATE);
					prod.getFeatures().add(domain);
					
					//TODO : src/trgtCmd check
					//TODO : src/trgtNe check
					//TODO : src/trgtFtrCd check
					//TODO : rollback ne command check
					//TODO : exception flow check
					
					this.addProvFeatureByProduct(prod);
					
					domain.setProd(null);
					prod = null;
				} catch (AcubeException e) {
					String messageId = e.getMessage();
					String message = messageId;
					domain.setResult(new Result(ResultCode.FAIL, message));
					if(messageId.equals("pvs.feature.key.duplicate")){
						message = ResourceUtil.getMessage(messageId);
						domain.setResult(new Result(ResultCode.FAIL, message));
					}
					throw new AcubeException(messageId, message);
				}	
			}
		}
	}
}
